#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

require 'thor'
# base module
module Bravo
  # Bravo executable for certificate request generation
  #
  class Bravo < Thor
    desc 'gencsr', 'Crea el Certificate Signature Request'
    method_option :bin,  type: :string, required: true, desc: 'El path completo al binario de openssl'
    method_option :pkey, type: :string,
      desc: 'Path a una clave privada preexistente. Si se omite, se crea una clave en --out'
    method_option :sn,   type: :string, required: true,
      desc: 'Nombre del servidor. Sin uso práctico, es requerido por AFIP'
    method_option :cn,   type: :string, required: true,
      desc: 'Nombre de la compañía. Sin uso práctico, es requerido por AFIP'
    method_option :cuit, type: :numeric, required: true,
      desc: 'Número de CUIT sin guiones. Ejemplo: 20876543217'
    method_option :out,  type: :string, default: 'bravo-certs',
      desc: 'Directorio de destino para los archivos creados. Default: "./bravo-certs"'

    # Certificate Signature Request wrapper for bravo.
    #
    # @param bin [Sting] the path for `openssl` binary. Required.
    # @param pkey [String] path for an existing private key. If ommitted, a new one will be generated in --out
    #
    def gencsr
      bin   = options[:bin]
      sn    = options[:sn]
      cn    = options[:cn]
      cuit  = options[:cuit]
      out   = options[:out]

      Dir.mkdir(out) unless File.exist?(out)

      out_path = "#{ Dir.pwd }/#{ out }/"

      pkey  = options[:pkey] || create_pkey(bin, out_path)

      say("Creando CSR en #{ out_path } con CUIT=#{ cuit }, o=#{ sn } y cn=#{ cn }", :cyan)

      `#{bin} req -new \
                  -key #{ pkey } \
                  -subj "/C=AR/O=#{ sn }/CN=#{ cn }/serialNumber=CUIT #{ cuit }"\
                  -out #{ out_path }pedido-#{ cuit }`

      say('Hecho!', :green)
    end

    protected

    # Creates a new private key
    #
    def create_pkey(bin, out_path)
      say('Creando pkey', :cyan)
      `#{ bin } genrsa -out #{ out_path }pkey 1024`
      say('Hecho!\n\n', :green)
      "#{ out_path }pkey"
    end
  end

  Bravo.start
end
